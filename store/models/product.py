from django.db import models
from .category import SubCategory
from django.contrib.auth.models import User


class Product(models.Model):
    SIZES = [
        ("S", "Small"),
        ("M", "Medium"),
        ("L", "Large"),
        ("XL", "X-Large"),
    ]
    title = models.CharField(max_length=255)
    description = models.TextField(
        blank=True,
        null=True,
        help_text="Description generated by LLaMA AI for accurate and engaging content.",
    )
    price = models.DecimalField(max_digits=10, decimal_places=2)
    image = models.ImageField(upload_to="products/")
    subcategory = models.ForeignKey(SubCategory, on_delete=models.CASCADE)
    available_sizes = models.JSONField(default=list)
    stock = models.PositiveIntegerField(default=10)  # ðŸ‘ˆ Add this line
    sale_price = models.DecimalField(
        max_digits=10, decimal_places=2, null=True, blank=True
    )

    def is_on_sale(self):
        return self.sale_price is not None and self.sale_price < self.price

    def get_display_price(self):
        return self.sale_price if self.is_on_sale() else self.price

    def discount_percentage(self):
        if self.is_on_sale():
            return round(100 - (self.sale_price / self.price * 100))
        return 0

    def is_in_stock(self):
        return self.stock > 0


class ProductImage(models.Model):
    product = models.ForeignKey(
        Product, on_delete=models.CASCADE, related_name="images"
    )
    image = models.ImageField(upload_to="products/gallery/")

    def __str__(self):
        return f"{self.product.title} - Extra Image"


class Review(models.Model):
    product = models.ForeignKey(
        "Product", on_delete=models.CASCADE, related_name="reviews"
    )
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    rating = models.IntegerField(choices=[(i, i) for i in range(1, 6)])
    comment = models.TextField()
    sentiment = models.CharField(
        max_length=10,
        choices=[
            ("Positive", "Positive"),
            ("Negative", "Negative"),
            ("Neutral", "Neutral"),
        ],
        default="Neutral",
    )
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.user.username} - {self.product.title} ({self.rating})"


def apply_competitor_price(self, competitor_price):
    # Set price 5% cheaper, but not below your base price
    new_price = max(competitor_price * 0.95, self.base_price)
    self.final_price = round(new_price, 2)
    self.save()
